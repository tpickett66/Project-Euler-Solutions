#!/usr/bin/env ruby
# encoding: UTF-8
$:.unshift(File.dirname(__FILE__) + '/../../lib') unless $:.include?(File.dirname(__FILE__) + '/../../lib')

# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91  99.

# Find the largest palindrome made from the product of two 3-digit numbers.

# approach
# I've extended Numeric to include a #palindrome? method that does the check
# for us. Once that was done it's trivial to collect all of the large
# palindromes that are products of two 3 digit numbers in a set.

require 'pes' # pull in our solution tools
require 'set' # pull in set from the standard lib

start = Time.now
dromes = Set.new

999.downto 900 do |n|
  999.downto 900 do |m|
    num = n * m
    dromes.add(num) if num.palindrome?
  end
end

max = dromes.max

stop = Time.now
et = (stop.to_f - start.to_f).round(3)
puts "Found solution: #{max} (#{et} sec)"
